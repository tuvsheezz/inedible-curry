{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/togi/ws/inedible-curry/pages/post.tsx\",\n    _this = this;\n\nimport { withRouter } from 'next/router';\nimport Layout from '../components/Layout';\n\nvar Post = function Post(_ref) {\n  var router = _ref.router;\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: router.query.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"This is the blog post content.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, _this);\n};\n\n_c3 = Post;\n_c = Post;\nexport default _c2 = withRouter(Post);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Post\");\n$RefreshReg$(_c2, \"%default%\");\n;\n\nvar _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n// to extract CSS. For backwards compatibility, we need to check we're in a\n// browser context before continuing.\n\n\nif (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n'$RefreshHelpers$' in self) {\n  var currentExports = module.__proto__.exports;\n  var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n  // templating and execution.\n\n  self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id); // A module can be accepted automatically based on its exports, e.g. when\n  // it is a Refresh Boundary.\n\n  if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n    // Save the previous exports on update so we can compare the boundary\n    // signatures.\n    module.hot.dispose(function (data) {\n      data.prevExports = currentExports;\n    }); // Unconditionally accept an update to this module, we'll check if it's\n    // still a Refresh Boundary later.\n\n    module.hot.accept(); // This field is set when the previous version of this module was a\n    // Refresh Boundary, letting us know we need to check for invalidation or\n    // enqueue an update.\n\n    if (prevExports !== null) {\n      // A boundary can become ineligible if its exports are incompatible\n      // with the previous exports.\n      //\n      // For example, if you add/remove/change exports, we'll want to\n      // re-execute the importing modules, and force those components to\n      // re-render. Similarly, if you convert a class component to a\n      // function, we want to invalidate the boundary.\n      if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n        module.hot.invalidate();\n      } else {\n        self.$RefreshHelpers$.scheduleUpdate();\n      }\n    }\n  } else {\n    // Since we just executed the code for the module, it's possible that the\n    // new exports made it ineligible for being a boundary.\n    // We only care about the case when we were _previously_ a boundary,\n    // because we already accepted this update (accidental side effect).\n    var isNoLongerABoundary = prevExports !== null;\n\n    if (isNoLongerABoundary) {\n      module.hot.invalidate();\n    }\n  }\n}\n\nvar _c3;\n\n$RefreshReg$(_c3, \"Post\");","map":{"version":3,"sources":["/Users/togi/ws/inedible-curry/pages/post.tsx"],"names":["Post","router","title","withRouter"],"mappings":";;;;;AAAA,SAAA,UAAA,QAAA,aAAA;AACA,OAAA,MAAA,MAAA,sBAAA;;AAIA,IAAMA,IAAwC,GAAG,SAA3CA,IAA2C,CAAA,IAAA,EAAgB;AAAA,MAAbC,MAAa,GAAA,IAAA,CAAbA,MAAa;AAC/D,SAAA,aACE,OAAA,CAAA,MAAA,EAAA;AAAA,IAAA,QAAA,EAAA,CAAA,aACE,OAAA,CAAA,IAAA,EAAA;AAAA,MAAA,QAAA,EAAKA,MAAM,CAANA,KAAAA,CAAaC;AAAlB,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,EAAA;AAAA,MAAA,QAAA,EAAA,YAAA;AAAA,MAAA,UAAA,EAAA,CAAA;AAAA,MAAA,YAAA,EAAA;AAAA,KAAA,EADF,KACE,CADF,EAAA,aAEE,OAAA,CAAA,GAAA,EAAA;AAAA,MAAA,QAAA,EAAA;AAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,EAAA;AAAA,MAAA,QAAA,EAAA,YAAA;AAAA,MAAA,UAAA,EAAA,EAAA;AAAA,MAAA,YAAA,EAAA;AAAA,KAAA,EAFF,KAEE,CAFF;AAAA,GAAA,EAAA,KAAA,CAAA,EAAA,IAAA,EAAA;AAAA,IAAA,QAAA,EAAA,YAAA;AAAA,IAAA,UAAA,EAAA,CAAA;AAAA,IAAA,YAAA,EAAA;AAAA,GAAA,EADF,KACE,CADF;AADF,CAAA;;MAAMF,I;KAAAA,I;AAQN,eAAA,GAAA,GAAeG,UAAU,CAAzB,IAAyB,CAAzB","sourcesContent":["import { withRouter } from 'next/router'\nimport Layout from '../components/Layout'\ntype PostProps = {\n  router?: any\n}\nconst Post: React.FunctionComponent<PostProps> = ({ router }) => {\n  return (\n    <Layout>\n      <h1>{router.query.title}</h1>\n      <p>This is the blog post content.</p>\n    </Layout>\n  )\n}\nexport default withRouter(Post)\n"]},"metadata":{},"sourceType":"module"}